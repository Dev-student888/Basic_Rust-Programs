/* VETORES SÃO ESTRUTURAS DE DADOS QUE PERMITEM ARMAZENAR VÁRIOS ELEMENTOS DE UM ÚNICO TIPO,
   MAS EXISTEM FORMAS DE VOCÊ ARMAZENAR TIPOS VARIADOS DE DADOS EM UM ÚNICO VETOR.
   EXISTEM DUAS FORMAS DE SE CRIAR UM VETOR. 
   - A PRIMEIRA FORMA É USANDO A MACRO vec![] PASSANDO PARA ELA OS ELEMENTOS DO SEU VETOR 
   E ASSOCIANDO A ESSA MACRO UMA VARIÁVEL.
   - A SEGUNDA FORMA É USANDO UMA VARIÁVEL QUALQUER, ESPECIFICANDO O SEU TIPO COMO Vec, 
   DEPOIS BASTA ESPECIFICAR O TIPO DE Vec ENTRE OS SINAIS DE MAIOR E MENOR `<>`.
   EX.: let v: Vec<u32> 
   DEPOIS ASSOCIE A RESPECTIVA VARIÁVEL A FUNÇÃO Vec::new();
   EX. COMPLETO: let v: Vec<u32> = Vec::new();
   ALGUMAS DAS FUNÇÕES DAS VARIÁVEIS DO TIPO Vec SÃO A FUNÇÃO push() E A FUNÇÃO remove.
   A FUNÇÃO push RECEBE COMO PARÂMETRO O ELEMENTO QUE SE DESEJA ADICIONAR AO VETOR.
   A FUNÇÃO remove RECEBE COMO PARÂMETRO O ÍNDICE DO ELEMENTO QUE SE DESEJA REMOVER NO VETOR. 

   DEPOIS PARA IMPRIMIR OS SEUS VALORES NA TELA É MUITO PERECIDO COM COMO FAZEMOS PARA IMPRIMIR
   OS VALORES DE UM ARRAY, ISSO VALE PARA AMBAS AS FORMAS.
   BASTA USAR println!("{}", nome_da_variavel[indice_do_elemento_no_vetor]); 
*/

fn main(){
    let v = vec![33, 34, 35];
    println!("{}", v[0]);

    let mut v: Vec<u32> = Vec::new();
    v.push(0);
    v.push(1);
    v.push(2);
    v.push(3);
    v.remove(3);
    println!("{}", v[0]);
}
